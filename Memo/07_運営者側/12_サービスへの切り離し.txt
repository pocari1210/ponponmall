
12_サービスへの切り離し

例で店舗の画像のほかに商品画像も貼る予定で
同じコードを書かなくてはいけないことになるので、
簡素化するために、関数化する

◆サービスファイル編集◆
\app\Services\ImageService.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

<?php

namespace App\Services;

use Illuminate\Support\Facades\Storage;
use InterventionImage;

class ImageService
{
public static function upload($imageFile, $folderName)
    {
        //dd($imageFile['image']);
        if(is_array($imageFile))
        {
            $file = $imageFile['image'];
        } else {
            $file = $imageFile;
        }

        $fileName= uniqid(rand().'_');
        $extension = $imageFile->extension();
        $fileNameToStore = $fileName. '.' . $extension;
        $resizedImage = InterventionImage::make($imageFile)->resize(1920, 1080)->encode();
        Storage::put('public/' . $folderName . '/' . $fileNameToStore, $resizedImage );
        
        return $fileNameToStore;
}

★コード解説★
namespace App\Services;
⇒namespaceは必ず必要

class ImageService
⇒クラス名はファイル名と同じにする

public static function upload($imageFile, $folderName)
⇒public staticとすることで：(コロン)で呼び出すことができる

upload($imageFile, $folderName)
⇒画像$imageFileが登録されていたら、$folderNameに保存する

⇒第一引数：画像がアップロードされていたらということになるので、
　$imageFileとする

⇒第二引数：画像の保存場所を指定する($folderNameで定義)

return $fileNameToStore;
⇒ファイル名をreturn値として返す

//////////////////////////////////////////////////////////////////////////

◆コントローラー編集◆
\app\Http\Controllers\Owner\Shopcontroller.php

use App\Services\ImageService;

    public function update(UploadImageRequest $request, $id)
    {
        $imageFile = $request->image;
        if(!is_null($imageFile) && $imageFile->isValid() ){
            ToStore = ImageService::upload($imageFile,'shops');
        }

★コード解説★
ToStore = ImageService::upload($imageFile,'shops');
⇒ファイル名が設定され、shopsフォルダ下に画像が登録していればOK
