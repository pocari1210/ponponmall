
40_Faker & Factory

Faker ・・PHPライブラリ ダミーデータ生成 
https://fakerphp.github.io/

Factory・・ダミーを量産する仕組み 
 Laravel8からクラスベースに変更

config/app.php 日本語化対応 
 'faker_locale' => 'ja_JP', に変更
 
念の為 php artisan config:clear でキャッシュ削除

php artisan make:factory ProductFactory --model=Product 
php artisan make:factory StockFactory --model=Stock 

fakerチートシート 
https://qiita.com/tosite0345/items/1d47961947a6770053af

◆ファクトリーファイル編集(product)◆

ディレクトリ
\database\factories\ProductFactory.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

use App\Models\Product;

class ProductFactory extends Factory
{
    protected $model = Product::class;

    public function definition()
    {
        return [
            'name' => $this->faker->name,
            'information' => $this->faker->realText,
            'price' => $this->faker->numberBetween(10, 100000),
            'is_selling' => $this->faker->numberBetween(0,1),
            'sort_order' => $this->faker->randomNumber,
            'shop_id' => $this->faker->numberBetween(1,2),
            'secondary_category_id' => $this->faker->numberBetween(1,6),
            'image1' => $this->faker->numberBetween(1,6),
            'image2' => $this->faker->numberBetween(1,6),
            'image3' => $this->faker->numberBetween(1,6),
            'image4' => $this->faker->numberBetween(1,6),

        ];
    }
}


★コード解説★



$this->faker->numberBetween(10, 100000)
⇒10から100000の間の数値をランダムでダミーデータを生成する

//////////////////////////////////////////////////////////////////////////////

◆ファクトリーファイル編集(stock)◆

ディレクトリ
\database\factories\ProductFactory.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

use App\Models\Stock;
use App\Models\Product;

class StockFactory extends Factory
{

    protected $model = Stock::class;

    public function definition()
    {
        return [
            'product_id' => Product::factory(),
            'type' => $this->faker->numberBetween(1,2),
            'quantity' => $this->faker->randomNumber,
        ];
    }

★コード解説★

'product_id' => Product::factory(),
⇒stockは外部キー制約でproductをもっているため、
　ProductFactoryで生成したものを紐づける必要がある

　ProductFactoryが生成した順番に登録される

Product::factory()
⇒\app\Models\Product.php(モデルファイル)に、
　use HasFactoryと記述があるため、
　Product::factory()を使用することできる

//////////////////////////////////////////////////////////////////////////////

◆DatabaseSeeder追記◆

ディレクトリ
\database\seeders\DatabaseSeeder.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

use App\Models\Product;
use App\Models\Stock;

$this->call([
  CategorySeeder::class,
      // ProductSeeder::class,
     　// StockSeeder::class,
  ]);
  Product::factory(100)->create();
  Stock::factory(100)->create();
}

★コード解説★

use App\Models\Product;
use App\Models\Stock;
⇒モデルを使っているため、インポートをする必要がある

productのなかでshopやimageと外部キー制約をしている関係で
先にshop,
カテゴリーを実行してデータがないとエラーがでるので、
eunメソッドの後に追記をする必要がある

//////////////////////////////////////////////////////////////////////////////

◆fakerのダミーデータ登録◆

下記コマンドでダミーデーターを登録

php artisan migrate:fresh --seed

※fakerの登録はターミナルに反映されないので、注意が必要




